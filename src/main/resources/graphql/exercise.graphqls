enum WeightUnit {
    KG, LBS
}


input WeightValueInput {
    baseWeight: Int!
    fraction: Int
    unit: WeightUnit!
}

type WeightValue {
    baseWeight: Int!
    fraction: Int
    unit: WeightUnit!
}

type Exercise {
    id: ID!
    name: String!

    primaryMuscles: [MuscleGroup]
    secondaryMuscles: [MuscleGroup]

    user: User

    defaultAppliedWeight: WeightValue
}

input ExerciseInput {
    name: String!

    primaryMuscles: [MuscleGroup]
    secondaryMuscles: [MuscleGroup]

    defaultAppliedWeight: WeightValueInput
}


type ExerciseLog {
    id: ID!
    logDateTime: LocalDateTime!
    exercise: Exercise!
    user: User!
    repetitions: Float!
    weightLeft: Float!
    weightRight: Float!
    unit: WeightUnit!
}

type GroupedExerciseLog {
    exercise: Exercise!
    logs: [ExerciseLog!]!
}

input ExerciseLogInput {
    exerciseId: String!
    zonedDateTimeString: String!
    repetitions: Float!
    weightLeft: Float!
    weightRight: Float!
    unit: WeightUnit!
}

extend type Query {
    myExercises: [Exercise!]
}

extend type Mutation {
    createExercise(input: ExerciseInput): Exercise
    updateExercise(id: ID! input: ExerciseInput): Exercise
    deleteExercise(id: ID!): Boolean!
}
