enum BiometricsType {
    WEIGHT
}

input BiometricsLogInput {
    type: BiometricsType!
    value: Float!
    unit: LogUnit!
    logDate: String!
    dataSource: ExternalHealthProvider
}

type BiometricsLog {
    id: ID!
    type: BiometricsType!
    value: Float!
    logDate: LocalDateTime!
    dataSource: ExternalHealthProvider
}

input UserInput {
    firstName: String!
    middleName: String!
    lastName: String!
    email: String!
    password: String!
}

type User {
    id: ID!
    fid: String!
    cognitoUser: CognitoUser!
    onboardingCompleted: Boolean
    weight: BiometricsLog
}

type CognitoUser {
    name: String!
    userName: String!
    given_name: String!
    family_name: String!
    middle_name: String
    nickname: String!
    email: String!
    gender: String
    zoneinfo: String!
    locale: String!
    createdDate: String
}

type Query {
    users: [User]
    userById(id: String!): User
    me: User
}

type Mutation {
    createUser(userInput: UserInput!): User
    completeOnboarding: User!
    logBiometrics(biometricsLogInput: BiometricsLogInput!): User!
}
