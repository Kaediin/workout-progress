input LogValueInput {
    base: Int!
    fraction: Int
    unit: LogUnit!
}

type LogValue {
    base: Int!
    fraction: Int
    unit: LogUnit!
}

type ExerciseLog {
    id: ID!
    logDateTime: LocalDateTime!
    exercise: Exercise!
    user: User!
    repetitions: Float!
    logValue: LogValue!
    warmup: Boolean
    remark: String
}

type GroupedExerciseLog {
    exercise: Exercise!
    logs: [ExerciseLog!]!
}

input ExerciseLogInput {
    exerciseId: String!
    zonedDateTimeString: String!
    repetitions: Float!
    logValue: LogValueInput!
    warmup: Boolean!
    remark: String
}

extend type Query {
    latestLogsByExerciseId(exerciseId: ID!): [ExerciseLog]
}

extend type Mutation {
    addExerciseLog(workoutId: ID!, input: ExerciseLogInput!, autoAdjust: Boolean!): Workout
    updateExerciseLog(exerciseLogId: ID!, input: ExerciseLogInput!): Workout
    removeExerciseLog(exerciseLogId: String!, autoAdjust: Boolean!): Boolean!
    reLogLatestLog(workoutId: ID!, zonedDateTimeString: String!, autoAdjust: Boolean!): Workout
    reLogLog(workoutId: ID!, input: ExerciseLogInput!): Workout
}
