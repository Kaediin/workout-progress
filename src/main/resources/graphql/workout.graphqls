scalar LocalDateTime

enum MuscleGroup {
    ABDUCTOR
    ABS
    ADDUCTOR
    BACK_SHOULDERS
    BICEPS
    CALVES
    CHEST
    FOREARMS
    FRONT_SHOULDERS
    GLUTES
    HAMSTRINGS
    HANDS
    LATS
    LOWER_BACK
    NECK
    OBLIQUES
    QUADS
    SHINS
    TRICEPS
    UPPER_BACK
}

enum ExternalHealthProvider {
    APPLE_HEALTH
}

type ExternalHealthProviderData {
    appleHealthId: ID!
    provider: ExternalHealthProvider!
}

input ExternalHealthProviderDataInput {
    appleHealthId: ID!
    provider: ExternalHealthProvider!
}

type Workout {
    id: ID!
    name: String!
    muscleGroups: [MuscleGroup!]!
    startDateTime: LocalDateTime
    endDateTime: LocalDateTime
    active: Boolean
    exerciseLogs: [ExerciseLog!]!
    groupedExerciseLogs: [GroupedExerciseLog!]!
    remark: String
    externalHealthProviderData: ExternalHealthProviderData
    estimatedCaloriesBurned: Float
}

input WorkoutInput {
    name: String!
    muscleGroups: [MuscleGroup!]!
    zonedDateTime: String!
    remark: String
}

type MuscleGroupChartData {
    muscleGroup: MuscleGroup!
    color: String!
    count: Int!
}

extend type Query {
    "Fetch all my current workouts"
    myWorkouts: [Workout!]
    "Check if me has an active workout ie. one that hasn't ended yet"
    meHasActiveWorkout: Boolean!
    "Fetch workout by ID"
    workoutById(id: ID!): Workout
    "Fetch all workouts of user by current month with given timestamp"
    workoutsOfCurrentMonth(zonedDateTimeString: String!): [Workout!]!
    "Get total time of all workouts"
    countTotalTimeAllMyWorkoutsInMinutes: Float!
    "Count my workouts"
    countMyWorkouts: Int!
    "Get chart data per muscle group for all workouts of user by current month with given timestamp"
    chartDataMuscleGroups(zonedDateTimeString: String): [MuscleGroupChartData!]!
}

extend type Mutation {
    "Start a new workout for me"
    meStartWorkout(input: WorkoutInput!): Workout
    "End workout by ID"
    endWorkout(workoutId: ID!, zonedDateTimeString: String!): Workout
    "Delete workout by ID"
    deleteWorkout(id: ID!): Boolean
    "Update workout by ID"
    updateWorkout(id: ID!, input: WorkoutInput!): Workout!
    "Restart workout by ID. This only removes end date and set active to false"
    restartWorkout(id: ID!): Workout!
    "Add external health provider data to workout"
    addExternalHealthProviderData(workoutId: ID!, input: ExternalHealthProviderDataInput!): Workout!
    "Add calories burned to workout"
    addEstimatedCaloriesBurned(workoutId: ID!, estimatedCaloriesBurned: Float!): Workout!
}
